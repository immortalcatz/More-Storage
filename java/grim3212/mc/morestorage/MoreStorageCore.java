package grim3212.mc.morestorage;

import grim3212.mc.core.Grim3212Core;
import grim3212.mc.core.GrimModule;
import grim3212.mc.core.network.PacketDispatcher;
import grim3212.mc.core.util.Reference;
import grim3212.mc.morestorage.Cabinet.BlockGlassCabinet;
import grim3212.mc.morestorage.Cabinet.BlockWoodCabinet;
import grim3212.mc.morestorage.Cabinet.TileEntityGlassCabinet;
import grim3212.mc.morestorage.Cabinet.TileEntityGlassCabinetRenderer;
import grim3212.mc.morestorage.Cabinet.TileEntityWoodCabinet;
import grim3212.mc.morestorage.Cabinet.TileEntityWoodCabinetRenderer;
import grim3212.mc.morestorage.Crate.BlockWarehouseCrate;
import grim3212.mc.morestorage.Crate.TileEntityWarehouseCrate;
import grim3212.mc.morestorage.Crate.TileEntityWarehouseCrateRenderer;
import grim3212.mc.morestorage.Locker.BlockLocker;
import grim3212.mc.morestorage.Locker.ContainerLocker;
import grim3212.mc.morestorage.Locker.GuiLocker;
import grim3212.mc.morestorage.Locker.InventoryDualLocker;
import grim3212.mc.morestorage.Locker.TileEntityLocker;
import grim3212.mc.morestorage.Locker.TileEntityLockerRenderer;
import grim3212.mc.morestorage.Locksmith.BlockLocksmithWorkbench;
import grim3212.mc.morestorage.Locksmith.ContainerLocksmithWorkbench;
import grim3212.mc.morestorage.Locksmith.GuiLocksmithWorkbench;
import grim3212.mc.morestorage.Safe.BlockGoldSafe;
import grim3212.mc.morestorage.Safe.BlockObsidianSafe;
import grim3212.mc.morestorage.Safe.ContainerGoldSafe;
import grim3212.mc.morestorage.Safe.GuiGoldSafe;
import grim3212.mc.morestorage.Safe.TileEntityGoldSafe;
import grim3212.mc.morestorage.Safe.TileEntityGoldSafeRenderer;
import grim3212.mc.morestorage.Safe.TileEntityObsidianSafe;
import grim3212.mc.morestorage.Safe.TileEntityObsidianSafeRenderer;
import grim3212.mc.morestorage.Tower.BlockItemTower;
import grim3212.mc.morestorage.Tower.ContainerItemTower;
import grim3212.mc.morestorage.Tower.GuiItemTower;
import grim3212.mc.morestorage.Tower.InventoryItemTower;
import grim3212.mc.morestorage.Tower.TileEntityItemTower;
import grim3212.mc.morestorage.Tower.TileEntityItemTowerRenderer;

import java.util.ArrayList;
import java.util.HashMap;

import net.minecraft.block.Block;
import net.minecraft.block.material.Material;
import net.minecraft.client.gui.inventory.GuiChest;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.init.Blocks;
import net.minecraft.init.Items;
import net.minecraft.inventory.ContainerChest;
import net.minecraft.item.Item;
import net.minecraft.item.ItemStack;
import net.minecraft.tileentity.TileEntity;
import net.minecraft.world.World;
import cpw.mods.fml.client.registry.ClientRegistry;
import cpw.mods.fml.client.registry.RenderingRegistry;
import cpw.mods.fml.common.FMLCommonHandler;
import cpw.mods.fml.common.Mod;
import cpw.mods.fml.common.Mod.EventHandler;
import cpw.mods.fml.common.Mod.Instance;
import cpw.mods.fml.common.ModMetadata;
import cpw.mods.fml.common.event.FMLInitializationEvent;
import cpw.mods.fml.common.event.FMLPreInitializationEvent;
import cpw.mods.fml.common.network.NetworkRegistry;
import cpw.mods.fml.common.registry.GameRegistry;
import cpw.mods.fml.relauncher.Side;
import cpw.mods.fml.relauncher.SideOnly;

@Mod(modid = MoreStorageCore.modID, name = MoreStorageCore.modName, version = MoreStorageCore.modVersion, dependencies = "required-after:grim3212core")
public class MoreStorageCore extends GrimModule {

	@Instance(MoreStorageCore.modID)
	public static MoreStorageCore instance;

	public static final String modID = "morestorage";
	public static final String modName = "More Storage";
	public static final String modVersion = "V0.1 - " + Reference.MC_VERSION;
	public static final String modURL = "http://grim3212.wikispaces.com/More+Storage";

	public static Item ItemLocksmithLock;
	public static Item ItemLocksmithKey;
	public static Block BlockLocksmithWorkbench;
	public static Block BlockWoodCabinet;
	public static Block BlockGlassCabinet;
	public static Block BlockWarehouseCrate;
	public static Block BlockObsidianSafe;
	public static Block BlockGoldSafe;
	public static Block BlockLocker;
	public static Block BlockItemTower;
	public static int CustomRendererID;
	public static HashMap<Block, TileEntity> DefaultTileEntityMap = new HashMap();

	@EventHandler
	public void PreInit(FMLPreInitializationEvent event) {
		ModMetadata data = event.getModMetadata();
		data.autogenerated = false;
		data.version = MoreStorageCore.modVersion;
		data.name = MoreStorageCore.modName;
		data.description = "Gives you more storage options to minecraft.";
		data.authorList.add("Grim3212");
		data.authorList.add("ngphoenix");
		data.url = MoreStorageCore.modURL;
		data.credits = "Thanks to ngphoenix for the original mod.";
		data.logoFile = Reference.LOGOFILE;

		PacketDispatcher.registerMessage(MessageMoreStorage.class, MessageMoreStorage.class, Side.SERVER);

		NetworkRegistry.INSTANCE.registerGuiHandler(instance, this);

		boolean isClient = event.getSide() == Side.CLIENT;

		ItemLocksmithLock = new ItemCombination().setCreativeTab(Grim3212Core.tabGrimStuff).setUnlocalizedName("locksmith_lock");
		ItemLocksmithKey = new ItemCombination().setCreativeTab(Grim3212Core.tabGrimStuff).setUnlocalizedName("locksmith_key");
		BlockLocksmithWorkbench = new BlockLocksmithWorkbench().setStepSound(Block.soundTypeWood).setHardness(3.0F).setResistance(5.0F).setBlockName("blocklocksmithworkbench");
		BlockWoodCabinet = new BlockWoodCabinet(Material.wood).setStepSound(Block.soundTypeWood).setHardness(3.0F).setResistance(5.0F).setBlockName("blockwoodcabinet").setBlockTextureName("log_oak");
		BlockGlassCabinet = new BlockGlassCabinet(Material.wood).setStepSound(Block.soundTypeWood).setHardness(3.0F).setResistance(5.0F).setBlockName("blockglasscabinet").setBlockTextureName("glass");
		BlockWarehouseCrate = new BlockWarehouseCrate(Material.wood).setStepSound(Block.soundTypeWood).setHardness(3.0F).setResistance(5.0F).setBlockName("blockwarehousecrate").setBlockTextureName("planks_oak");
		BlockObsidianSafe = new BlockObsidianSafe(Material.rock).setStepSound(Block.soundTypeStone).setHardness(3.0F).setResistance(5.0F).setBlockName("blockobsidiansafe").setBlockTextureName("obsidian");
		BlockGoldSafe = new BlockGoldSafe(Material.iron).setStepSound(Block.soundTypeMetal).setHardness(3.0F).setResistance(5.0F).setBlockName("blockgoldsafe").setBlockTextureName("gold_block");
		BlockLocker = new BlockLocker(Material.iron).setStepSound(Block.soundTypeMetal).setHardness(3.0F).setResistance(5.0F).setBlockName("blocklocker").setBlockTextureName("iron_block");
		BlockItemTower = new BlockItemTower(Material.iron).setStepSound(Block.soundTypeMetal).setHardness(3.0F).setResistance(5.0F).setBlockName("blockitemtower").setBlockTextureName("iron_block");

		GameRegistry.registerItem(ItemLocksmithLock, ItemLocksmithLock.getUnlocalizedName(), this.modID);
		GameRegistry.registerItem(ItemLocksmithKey, ItemLocksmithKey.getUnlocalizedName(), this.modID);
		GameRegistry.registerBlock(BlockLocksmithWorkbench, "Locksmith Workbench");
		GameRegistry.registerBlock(BlockWoodCabinet, "WoodCabinet");
		GameRegistry.registerBlock(BlockGlassCabinet, "GlassCabinet");
		GameRegistry.registerBlock(BlockWarehouseCrate, "WarehouseCrate");
		GameRegistry.registerBlock(BlockObsidianSafe, "ObsidianSafe");
		GameRegistry.registerBlock(BlockGoldSafe, "GoldSafe");
		GameRegistry.registerBlock(BlockLocker, "Locker");
		GameRegistry.registerBlock(BlockItemTower, "ItemTower");

		// Use OreDictionary
		GameRegistry.addRecipe(new ItemStack(ItemLocksmithLock, 3, 0), new Object[] { " I ", "I I", "III", 'I', Items.iron_ingot });
		GameRegistry.addRecipe(new ItemStack(ItemLocksmithKey, 3, 0), new Object[] { "II", "II", "I ", 'I', Items.gold_ingot });
		GameRegistry.addRecipe(new ItemStack(BlockLocksmithWorkbench, 1, 0), new Object[] { "L", "K", "W", 'L', ItemLocksmithLock, 'K', ItemLocksmithKey, 'W', Blocks.crafting_table });
		GameRegistry.addRecipe(new ItemStack(BlockLocksmithWorkbench, 1, 0), new Object[] { "K", "L", "W", 'L', ItemLocksmithLock, 'K', ItemLocksmithKey, 'W', Blocks.crafting_table });
		GameRegistry.addRecipe(new ItemStack(BlockWoodCabinet, 1, 0), new Object[] { " X ", "XCX", " X ", 'X', Blocks.planks, 'C', Blocks.chest });
		GameRegistry.addRecipe(new ItemStack(BlockGlassCabinet, 1, 0), new Object[] { " X ", "GCG", " X ", 'X', Blocks.planks, 'C', Blocks.chest, 'G', Blocks.glass });
		GameRegistry.addRecipe(new ItemStack(BlockWarehouseCrate, 1, 0), new Object[] { "LLL", "P P", "PPP", 'P', Blocks.planks, 'L', Blocks.log });
		GameRegistry.addRecipe(new ItemStack(BlockObsidianSafe, 1, 0), new Object[] { " X ", "XCX", " X ", 'X', Blocks.obsidian, 'C', Blocks.chest });
		GameRegistry.addRecipe(new ItemStack(BlockGoldSafe, 1, 0), new Object[] { " G ", "GIG", " G ", 'I', BlockObsidianSafe, 'G', Items.gold_ingot });
		GameRegistry.addRecipe(new ItemStack(BlockLocker, 1, 0), new Object[] { " X ", "XCX", " X ", 'X', Items.iron_ingot, 'C', Blocks.chest });
		GameRegistry.addRecipe(new ItemStack(BlockItemTower, 4, 0), new Object[] { "I I", "ICI", "I I", 'I', Items.iron_ingot, 'C', Blocks.chest });

		DefaultTileEntityMap.put(BlockWoodCabinet, BlockWoodCabinet.createTileEntity(null, 0));
		DefaultTileEntityMap.put(BlockGlassCabinet, BlockGlassCabinet.createTileEntity(null, 0));
		DefaultTileEntityMap.put(BlockWarehouseCrate, BlockWarehouseCrate.createTileEntity(null, 0));
		DefaultTileEntityMap.put(BlockObsidianSafe, BlockObsidianSafe.createTileEntity(null, 0));
		DefaultTileEntityMap.put(BlockGoldSafe, BlockGoldSafe.createTileEntity(null, 0));
		DefaultTileEntityMap.put(BlockLocker, BlockLocker.createTileEntity(null, 0));
		DefaultTileEntityMap.put(BlockItemTower, BlockItemTower.createTileEntity(null, 0));

		GameRegistry.registerTileEntity(TileEntityStorage.class, "MoreStorageBlock");
		if (!isClient) {
			GameRegistry.registerTileEntity(TileEntityWoodCabinet.class, "MoreStorageWoodCabinet");
			GameRegistry.registerTileEntity(TileEntityGlassCabinet.class, "MoreStorageGlassCabinet");
			GameRegistry.registerTileEntity(TileEntityWarehouseCrate.class, "MoreStorageWarehouseCrate");
			GameRegistry.registerTileEntity(TileEntityObsidianSafe.class, "MoreStorageObsidianSafe");
			GameRegistry.registerTileEntity(TileEntityGoldSafe.class, "MoreStorageGoldSafe");
			GameRegistry.registerTileEntity(TileEntityLocker.class, "MoreStorageLocker");
			GameRegistry.registerTileEntity(TileEntityItemTower.class, "MoreStorageItemTower");
		}

		if (isClient)
			initClient();
	}

	@EventHandler
	public void Init(FMLInitializationEvent event) {
	}

	@SideOnly(Side.CLIENT)
	public void initClient() {
		CustomRendererID = RenderingRegistry.getNextAvailableRenderId();
		RenderingRegistry.registerBlockHandler(CustomRendererID, new MoreStorageRenderer());
		ClientRegistry.registerTileEntity(TileEntityWoodCabinet.class, "MoreStorageWoodCabinet", new TileEntityWoodCabinetRenderer());
		ClientRegistry.registerTileEntity(TileEntityGlassCabinet.class, "MoreStorageGlassCabinet", new TileEntityGlassCabinetRenderer());
		ClientRegistry.registerTileEntity(TileEntityWarehouseCrate.class, "MoreStorageWarehouseCrate", new TileEntityWarehouseCrateRenderer());
		ClientRegistry.registerTileEntity(TileEntityObsidianSafe.class, "MoreStorageObsidianSafe", new TileEntityObsidianSafeRenderer());
		ClientRegistry.registerTileEntity(TileEntityGoldSafe.class, "MoreStorageGoldsafe", new TileEntityGoldSafeRenderer());
		ClientRegistry.registerTileEntity(TileEntityLocker.class, "MoreStorageLocker", new TileEntityLockerRenderer());
		ClientRegistry.registerTileEntity(TileEntityItemTower.class, "MoreStorageItemTower", new TileEntityItemTowerRenderer());
	}

	public Object getServerGuiElement(int ID, EntityPlayer player, World world, int x, int y, int z) {
		TileEntity tileentity = world.getTileEntity(x, y, z);
		TileEntity tileentitytop = world.getTileEntity(x, y + 1, z);

		switch (ID) {
		case 0:
			return checkUsable(tileentity, player) ? new ContainerChest(player.inventory, (TileEntityStorage) tileentity) : null;
		case 1:
			return new ContainerLocksmithWorkbench(player.inventory, world, x, y, z);
		case 2:
			return checkUsable(tileentity, player) ? new ContainerChest(player.inventory, (TileEntityStorage) tileentity) : null;
		case 3:
			return (checkUsable(tileentity, player)) && (checkUsable(tileentitytop, player)) ? new ContainerLocker(player.inventory, new InventoryDualLocker((TileEntityStorage) tileentity, (TileEntityStorage) tileentitytop)) : null;
		case 4:
			return getItemTowerContainer(player, world, x, y, z);
		case 5:
			return checkUsable(tileentity, player) ? new ContainerGoldSafe(player.inventory, (TileEntityStorage) tileentity) : null;
		}
		return null;
	}

	public Object getClientGuiElement(int ID, EntityPlayer player, World world, int x, int y, int z) {
		TileEntity tileentity = world.getTileEntity(x, y, z);
		TileEntity tileentitytop = world.getTileEntity(x, y + 1, z);

		switch (ID) {
		case 0:
			return new GuiChest(player.inventory, (TileEntityStorage) tileentity);
		case 1:
			return new GuiLocksmithWorkbench(player.inventory, world, x, y, z);
		case 2:
			return new GuiChest(player.inventory, (TileEntityStorage) tileentity);
		case 3:
			return new GuiLocker(player.inventory, new InventoryDualLocker((TileEntityStorage) tileentity, (TileEntityStorage) tileentitytop));
		case 4:
			return getItemTowerGui(player, world, x, y, z);
		case 5:
			return new GuiGoldSafe(player.inventory, (TileEntityStorage) tileentity);
		}
		return null;
	}

	private boolean checkUsable(TileEntity tileentity, EntityPlayer player) {
		TileEntityStorage tileentitystorage = (tileentity != null) && ((tileentity instanceof TileEntityStorage)) ? (TileEntityStorage) tileentity : null;
		return (tileentitystorage != null) && (tileentitystorage.isUseableByPlayer(player));
	}

	private Object getItemTowerGui(EntityPlayer player, World world, int x, int y, int z) {
		TileEntity tileentity = world.getTileEntity(x, y, z);

		if (checkUsable(tileentity, player)) {
			int ymod = y;
			while (world.getBlock(x, ymod - 1, z) == world.getBlock(x, y, z))
				ymod--;

			ArrayList itemTowers = new ArrayList();
			while (world.getBlock(x, ymod, z) == world.getBlock(x, y, z)) {
				itemTowers.add((TileEntityItemTower) world.getTileEntity(x, ymod, z));
				ymod++;
			}

			InventoryItemTower towerInv = new InventoryItemTower(itemTowers, (TileEntityItemTower) tileentity);
			return new GuiItemTower(player.inventory, towerInv);
		}

		return null;
	}

	private Object getItemTowerContainer(EntityPlayer player, World world, int x, int y, int z) {
		TileEntity tileentity = world.getTileEntity(x, y, z);

		if (checkUsable(tileentity, player)) {
			int ymod = y;
			while (world.getBlock(x, ymod - 1, z) == world.getBlock(x, y, z))
				ymod--;

			ArrayList itemTowers = new ArrayList();
			while (world.getBlock(x, ymod, z) == world.getBlock(x, y, z)) {
				itemTowers.add((TileEntityItemTower) world.getTileEntity(x, ymod, z));
				ymod++;
			}

			InventoryItemTower towerInv = new InventoryItemTower(itemTowers, (TileEntityItemTower) tileentity);
			return new ContainerItemTower(player.inventory, towerInv);
		}

		return null;
	}
}